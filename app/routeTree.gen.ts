/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedTodosLayoutImport } from './routes/_authed/todos/_layout'
import { Route as AuthedTodosLayoutIndexImport } from './routes/_authed/todos/_layout/index'
import { Route as AuthedTodosLayoutTodoIdImport } from './routes/_authed/todos/_layout/$todoId'

// Create Virtual Routes

const AuthedTodosImport = createFileRoute('/_authed/todos')()

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedTodosRoute = AuthedTodosImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTodosLayoutRoute = AuthedTodosLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthedTodosRoute,
} as any)

const AuthedTodosLayoutIndexRoute = AuthedTodosLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedTodosLayoutRoute,
} as any)

const AuthedTodosLayoutTodoIdRoute = AuthedTodosLayoutTodoIdImport.update({
  id: '/$todoId',
  path: '/$todoId',
  getParentRoute: () => AuthedTodosLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_authed/todos': {
      id: '/_authed/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof AuthedTodosImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/todos/_layout': {
      id: '/_authed/todos/_layout'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof AuthedTodosLayoutImport
      parentRoute: typeof AuthedTodosRoute
    }
    '/_authed/todos/_layout/$todoId': {
      id: '/_authed/todos/_layout/$todoId'
      path: '/$todoId'
      fullPath: '/todos/$todoId'
      preLoaderRoute: typeof AuthedTodosLayoutTodoIdImport
      parentRoute: typeof AuthedTodosLayoutImport
    }
    '/_authed/todos/_layout/': {
      id: '/_authed/todos/_layout/'
      path: '/'
      fullPath: '/todos/'
      preLoaderRoute: typeof AuthedTodosLayoutIndexImport
      parentRoute: typeof AuthedTodosLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthedTodosLayoutRouteChildren {
  AuthedTodosLayoutTodoIdRoute: typeof AuthedTodosLayoutTodoIdRoute
  AuthedTodosLayoutIndexRoute: typeof AuthedTodosLayoutIndexRoute
}

const AuthedTodosLayoutRouteChildren: AuthedTodosLayoutRouteChildren = {
  AuthedTodosLayoutTodoIdRoute: AuthedTodosLayoutTodoIdRoute,
  AuthedTodosLayoutIndexRoute: AuthedTodosLayoutIndexRoute,
}

const AuthedTodosLayoutRouteWithChildren =
  AuthedTodosLayoutRoute._addFileChildren(AuthedTodosLayoutRouteChildren)

interface AuthedTodosRouteChildren {
  AuthedTodosLayoutRoute: typeof AuthedTodosLayoutRouteWithChildren
}

const AuthedTodosRouteChildren: AuthedTodosRouteChildren = {
  AuthedTodosLayoutRoute: AuthedTodosLayoutRouteWithChildren,
}

const AuthedTodosRouteWithChildren = AuthedTodosRoute._addFileChildren(
  AuthedTodosRouteChildren,
)

interface AuthedRouteChildren {
  AuthedTodosRoute: typeof AuthedTodosRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedTodosRoute: AuthedTodosRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/todos': typeof AuthedTodosLayoutRouteWithChildren
  '/todos/$todoId': typeof AuthedTodosLayoutTodoIdRoute
  '/todos/': typeof AuthedTodosLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/todos': typeof AuthedTodosLayoutIndexRoute
  '/todos/$todoId': typeof AuthedTodosLayoutTodoIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_authed/todos': typeof AuthedTodosRouteWithChildren
  '/_authed/todos/_layout': typeof AuthedTodosLayoutRouteWithChildren
  '/_authed/todos/_layout/$todoId': typeof AuthedTodosLayoutTodoIdRoute
  '/_authed/todos/_layout/': typeof AuthedTodosLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/todos'
    | '/todos/$todoId'
    | '/todos/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/logout' | '/signup' | '/todos' | '/todos/$todoId'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_authed/todos'
    | '/_authed/todos/_layout'
    | '/_authed/todos/_layout/$todoId'
    | '/_authed/todos/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login",
        "/logout",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/todos"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_authed/todos": {
      "filePath": "_authed/todos",
      "parent": "/_authed",
      "children": [
        "/_authed/todos/_layout"
      ]
    },
    "/_authed/todos/_layout": {
      "filePath": "_authed/todos/_layout.tsx",
      "parent": "/_authed/todos",
      "children": [
        "/_authed/todos/_layout/$todoId",
        "/_authed/todos/_layout/"
      ]
    },
    "/_authed/todos/_layout/$todoId": {
      "filePath": "_authed/todos/_layout/$todoId.tsx",
      "parent": "/_authed/todos/_layout"
    },
    "/_authed/todos/_layout/": {
      "filePath": "_authed/todos/_layout/index.tsx",
      "parent": "/_authed/todos/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
